#!/bin/bash

# Script to wrap SnowStuffForHire to ease kiosk mode usage.

# The purpose of the script is to backup the log and database prior
# and after run, and pass the command parameters to the program.

# This script is really only usefull under Linux/KDE.

# Check if we are run in kiosk mode. 
KIOSK=$1

# Some constants.
KPTITLE="Snow Stuff For Hire"
KPTIMEOUT=3
KPBACKUPSTART="Starter backup af database"
KPBACKUPEND="Afsluttet backup af database"

# Datadir holds the database *and* the logs
DATADIR=/store/SnowStuffForHire/data
DATABASE=$DATADIR/ssfh.db
LOGFILE=$DATADIR/ssfh.log
OUTFILE=$DATADIR/ssfh.out

# This is where faubackup does its backups.
BACKUPDIR=/store/SnowStuffForHire/backup

# Our basedir
RP=`realpath $0`
BASEDIR=`dirname $RP`
cd $BASEDIR || die "Unable to change dir to $BASEDIR"

# Path to SnowStuffForHire - assumed to be this directory
SSFH=$BASEDIR/SnowStuffForHire.bin

############################################################
# Helper functions
function die() {
    ARGS="$@"
    ERROR="En fatal fejl er opstået<br><b>$ARGS</b>"
    echo "FATAL FEJL: $ERROR"
    $KDIALOG --title "Fatal fejl - ude af stand til at forsætte" --error "$ERROR"
    exit 1;
}

function info() {
    ARGS="$@"
    DATE=`date +"%Y-%m-%dT%H:%M:%S"`
    echo $DATE $ARGS
}

info Starting SnowStuffForHire

################################################################################
# Set up some bins
KDIALOG=$(which kdialog) || die "Kan ikke finde kdialog binær"
KSHUTDOWN=$(which kshutdown) || die "Kan ikke finde kshutdown"
RSYNC=$(which rsync) || die "Kan ikke finde rsync"
if ! test -x $SSFH ; then
    die "Kan ikke finde SnowStuffForHire binær angivet til '$SSFH'"
fi

############################################################
# Check then directories

if ! test -d $DATADIR -a -w $DATADIR ; then
    die "Kataloget '$DATADIR' der anvendes som data katalog, findes ikke, eller kan ikke skrives til"
fi
# TODO: Måske noget test af mount punkt, eller noget i den stil?
if ! test -d $BACKUPDIR -a -w $BACKUPDIR ; then
    die "Kataloget '$BACKUPDIR' der anvendes som backup katalog, findes ikke, eller kan ikke skrives til"
fi
# The binary checks the log file and database, so we leave it at that.

info All checks passed, performing backup


############################################################
# Repeat forever - exit if not in kioskmode
while true ; do 

    # Take a backup before starting. This should be quick.
    $KDIALOG --title "$KPTITLE" --passivepopup "$KPBACKUPSTART" $KPTIMEOUT
    $RSYNC "$DATADIR"/* "$BACKUPDIR"/`date +"%Y-%m-%d@%H:%M:%S"` || die "Kunne ikke lave backup af data inden start af SnowStuffForHire"
    $KDIALOG --title "$KPTITLE" --passivepopup "$KPBACKUPEND" $KPTIMEOUT
    
    info Backup OK, starting binary
    $SSFH $DATABASE $LOGFILE &> $OUTFILE
    
    info Binary terminated with exit code $? - doing post backup
    $KDIALOG --title "$KPTITLE" --passivepopup "$KPBACKUPSTART" $KPTIMEOUT
    $RSYNC "$DATADIR"/* "$BACKUPDIR"/`date +"%Y-%m-%d@%H:%M:%S"` || die "Kunne ikke lave backup af data efter start af SnowStuffForHire"
    $KDIALOG --title "$KPTITLE" --passivepopup "$KPBACKUPEND" $KPTIMEOUT
    info Postbackup done
    
    if test "x$KIOSK" != "x" ; then
        info In kiosk mode, asking user what to do
        # In kiosk mode, repeat with options.
        RESULT=""
        while true ; do  
            RESULT=`$KDIALOG --title "Foretag valg fra nedenstående menu" \
                --menu "Hvad ønsker du at gøre?" \
                "restart"  "Genstart udlejningssystem" \
                "shutdown" "Sluk computer (luk ned)" \
                "reboot"   "Genstart computer" \
                --default "Genstart udlejningssystem" `
            if test $? == 0 ; then
                break
            else 
                info "User cancelled. Asking again..."
            fi
        done
        # User has choosen something
        info "User choose $RESULT"
        case $RESULT in
            restart)
                info Restarting SnowStuffForHire
                ;;
            shutdown)
                info Shutting down system
                echo $KSHUTDOWN --shutdown 
                exit 0
                ;;
            reboot)
                info Restarting system
                echo $KSHUTDOWN --reboot
                exit 0
                ;;
            *)
                die "Internal error, RESULT is $RESULT"
                ;;
        esac
    else
        # Not in kiosk mode, just exit
        info "Not in kiosk mode, exiting"
        exit 0
    fi
done # Forever loop
